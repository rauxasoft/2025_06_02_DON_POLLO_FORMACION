package com.sinensia.hexagonal.modules.dependiente.domain.model;

import com.sinensia.hexagonal.shared.domain.exception.BusinessException;
import com.sinensia.hexagonal.shared.domain.model.DatosContacto;
import com.sinensia.hexagonal.shared.domain.model.DatosPersonales;

public class Dependiente {

    private final DependienteId id;
    private DatosPersonales datosPersonales;
    private String manipuladorAlimentos; // formato tipo "RS-0090223"

    public Dependiente(DependienteId id, DatosPersonales datosPersonales, DatosContacto datosContacto, String manipuladorAlimentos) {
        
    	if (id == null) {
        	throw new BusinessException("El id del dependiente no puede ser nulo");
        }
        
        if (datosPersonales == null) {
        	throw new BusinessException("Los datos personales no pueden ser nulos");
        }
        
        if (datosContacto == null) {
        	throw new BusinessException("Los datos de contacto no pueden ser nulos");
        }
        
        if (manipuladorAlimentos == null || manipuladorAlimentos.isBlank()) {
            throw new BusinessException("El carnet de manipulador de alimentos no puede ser nulo ni vac√≠o");
        }

        this.id = id;
        this.datosPersonales = datosPersonales;
        this.manipuladorAlimentos = manipuladorAlimentos;
    }

    public DependienteId getId() {
        return id;
    }

    public DatosPersonales getDatosPersonales() {
        return datosPersonales;
    }

    public String getManipuladorAlimentos() {
        return manipuladorAlimentos;
    }

    public void actualizarDatos(DatosPersonales nuevosDatos, DatosContacto nuevoContacto, String nuevoCarnet) {
        
    	if (nuevosDatos == null) {
        	throw new BusinessException("Los datos personales no pueden ser nulos");
        }
    	
        if (nuevoContacto == null) {
        	throw new BusinessException("Los datos de contacto no pueden ser nulos");
        }
        
        if (nuevoCarnet == null || nuevoCarnet.isBlank()) {
            throw new BusinessException("El carnet de manipulador de alimentos no puede ser nulo ni vac√≠o");
        }

        this.datosPersonales = nuevosDatos;
        this.manipuladorAlimentos = nuevoCarnet;
    }

    @Override
    public String toString() {
        return "Dependiente{" +
                "id=" + id +
                ", datosPersonales=" + datosPersonales +
                ", manipuladorAlimentos='" + manipuladorAlimentos + '\'' +
                '}';
    }
}

/*
 
¬øPor qu√© crear una clase (Value Object) en lugar de usar String?
 
Opci√≥n	    				Pros																		Contras
String						‚úÖ Menos c√≥digo																‚ö†Ô∏è Se repite l√≥gica
							‚úÖ M√°s simple																‚ö†Ô∏è No encapsula el formato
																										‚ö†Ô∏è Dif√≠cil de validar en todos los puntos
																	
Value Object				‚úÖ Valida el formato desde el constructor									‚ö†Ô∏è Un poco m√°s de c√≥digo inicial
							‚úÖ El dominio ‚Äúhabla‚Äù mejor (CarnetManipuladorAlimentos es m√°s expresivo)
							‚úÖ Puede extenderse f√°cilmente (fecha de expiraci√≥n, por ejemplo)
							
							
							
							
üìå Recomendaci√≥n

En un modelo DDD ortodoxo y expresivo como el que est√°s construyendo, s√≠ es recomendable encapsularlo como CarnetManipuladorAlimentos, especialmente porque:

Tiene una estructura espec√≠fica y validable.

- Su significado no es gen√©rico, es parte del lenguaje del dominio.
- Podr√≠a ampliarse m√°s adelante (por ejemplo: fecha de obtenci√≥n, entidad emisora...).



 */
 
